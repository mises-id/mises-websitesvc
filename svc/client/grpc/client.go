// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: 2021-11-26T09:27:01Z

// Package grpc provides a gRPC client for the Websitesvc service.
package grpc

import (
	"context"
	"github.com/pkg/errors"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mises-id/mises-websitesvc/proto"
	"github.com/mises-id/mises-websitesvc/svc"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn, options ...ClientOption) (pb.WebsitesvcServer, error) {
	var cc clientConfig

	for _, f := range options {
		err := f(&cc)
		if err != nil {
			return nil, errors.Wrap(err, "cannot apply option")
		}
	}

	clientOptions := []grpctransport.ClientOption{
		grpctransport.ClientBefore(
			contextValuesToGRPCMetadata(cc.headers)),
	}
	var websitecategorylistEndpoint endpoint.Endpoint
	{
		websitecategorylistEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"WebsiteCategoryList",
			EncodeGRPCWebsiteCategoryListRequest,
			DecodeGRPCWebsiteCategoryListResponse,
			pb.WebsiteCategoryListResponse{},
			clientOptions...,
		).Endpoint()
	}

	var websitepageEndpoint endpoint.Endpoint
	{
		websitepageEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"WebsitePage",
			EncodeGRPCWebsitePageRequest,
			DecodeGRPCWebsitePageResponse,
			pb.WebsitePageResponse{},
			clientOptions...,
		).Endpoint()
	}

	var websitesearchEndpoint endpoint.Endpoint
	{
		websitesearchEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"WebsiteSearch",
			EncodeGRPCWebsiteSearchRequest,
			DecodeGRPCWebsiteSearchResponse,
			pb.WebsiteSearchResponse{},
			clientOptions...,
		).Endpoint()
	}

	var websiterecommendEndpoint endpoint.Endpoint
	{
		websiterecommendEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"WebsiteRecommend",
			EncodeGRPCWebsiteRecommendRequest,
			DecodeGRPCWebsiteRecommendResponse,
			pb.WebsiteRecommendResponse{},
			clientOptions...,
		).Endpoint()
	}

	var websiteimportEndpoint endpoint.Endpoint
	{
		websiteimportEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"WebsiteImport",
			EncodeGRPCWebsiteImportRequest,
			DecodeGRPCWebsiteImportResponse,
			pb.WebsiteImportResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updatemetamaskphishingEndpoint endpoint.Endpoint
	{
		updatemetamaskphishingEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"UpdateMetaMaskPhishing",
			EncodeGRPCUpdateMetaMaskPhishingRequest,
			DecodeGRPCUpdateMetaMaskPhishingResponse,
			pb.UpdateMetaMaskPhishingResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updatephishingsiteblackoriginEndpoint endpoint.Endpoint
	{
		updatephishingsiteblackoriginEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"UpdatePhishingSiteBlackOrigin",
			EncodeGRPCUpdatePhishingSiteBlackOriginRequest,
			DecodeGRPCUpdatePhishingSiteBlackOriginResponse,
			pb.UpdatePhishingSiteBlackOriginResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updatephishingoriginbywebsiteEndpoint endpoint.Endpoint
	{
		updatephishingoriginbywebsiteEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"UpdatePhishingOriginByWebSite",
			EncodeGRPCUpdatePhishingOriginByWebSiteRequest,
			DecodeGRPCUpdatePhishingOriginByWebSiteResponse,
			pb.UpdatePhishingOriginByWebSiteResponse{},
			clientOptions...,
		).Endpoint()
	}

	var updatephishingsitebywebsiteEndpoint endpoint.Endpoint
	{
		updatephishingsitebywebsiteEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"UpdatePhishingSiteByWebsite",
			EncodeGRPCUpdatePhishingSiteByWebsiteRequest,
			DecodeGRPCUpdatePhishingSiteByWebsiteResponse,
			pb.UpdatePhishingSiteByWebsiteResponse{},
			clientOptions...,
		).Endpoint()
	}

	var phishingcheckEndpoint endpoint.Endpoint
	{
		phishingcheckEndpoint = grpctransport.NewClient(
			conn,
			"websitesvc.Websitesvc",
			"PhishingCheck",
			EncodeGRPCPhishingCheckRequest,
			DecodeGRPCPhishingCheckResponse,
			pb.PhishingCheckResponse{},
			clientOptions...,
		).Endpoint()
	}

	return svc.Endpoints{
		WebsiteCategoryListEndpoint:           websitecategorylistEndpoint,
		WebsitePageEndpoint:                   websitepageEndpoint,
		WebsiteSearchEndpoint:                 websitesearchEndpoint,
		WebsiteRecommendEndpoint:              websiterecommendEndpoint,
		WebsiteImportEndpoint:                 websiteimportEndpoint,
		UpdateMetaMaskPhishingEndpoint:        updatemetamaskphishingEndpoint,
		UpdatePhishingSiteBlackOriginEndpoint: updatephishingsiteblackoriginEndpoint,
		UpdatePhishingOriginByWebSiteEndpoint: updatephishingoriginbywebsiteEndpoint,
		UpdatePhishingSiteByWebsiteEndpoint:   updatephishingsitebywebsiteEndpoint,
		PhishingCheckEndpoint:                 phishingcheckEndpoint,
	}, nil
}

// GRPC Client Decode

// DecodeGRPCWebsiteCategoryListResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC websitecategorylist reply to a user-domain websitecategorylist response. Primarily useful in a client.
func DecodeGRPCWebsiteCategoryListResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.WebsiteCategoryListResponse)
	return reply, nil
}

// DecodeGRPCWebsitePageResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC websitepage reply to a user-domain websitepage response. Primarily useful in a client.
func DecodeGRPCWebsitePageResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.WebsitePageResponse)
	return reply, nil
}

// DecodeGRPCWebsiteSearchResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC websitesearch reply to a user-domain websitesearch response. Primarily useful in a client.
func DecodeGRPCWebsiteSearchResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.WebsiteSearchResponse)
	return reply, nil
}

// DecodeGRPCWebsiteRecommendResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC websiterecommend reply to a user-domain websiterecommend response. Primarily useful in a client.
func DecodeGRPCWebsiteRecommendResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.WebsiteRecommendResponse)
	return reply, nil
}

// DecodeGRPCWebsiteImportResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC websiteimport reply to a user-domain websiteimport response. Primarily useful in a client.
func DecodeGRPCWebsiteImportResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.WebsiteImportResponse)
	return reply, nil
}

// DecodeGRPCUpdateMetaMaskPhishingResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updatemetamaskphishing reply to a user-domain updatemetamaskphishing response. Primarily useful in a client.
func DecodeGRPCUpdateMetaMaskPhishingResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdateMetaMaskPhishingResponse)
	return reply, nil
}

// DecodeGRPCUpdatePhishingSiteBlackOriginResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updatephishingsiteblackorigin reply to a user-domain updatephishingsiteblackorigin response. Primarily useful in a client.
func DecodeGRPCUpdatePhishingSiteBlackOriginResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdatePhishingSiteBlackOriginResponse)
	return reply, nil
}

// DecodeGRPCUpdatePhishingOriginByWebSiteResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updatephishingoriginbywebsite reply to a user-domain updatephishingoriginbywebsite response. Primarily useful in a client.
func DecodeGRPCUpdatePhishingOriginByWebSiteResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdatePhishingOriginByWebSiteResponse)
	return reply, nil
}

// DecodeGRPCUpdatePhishingSiteByWebsiteResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC updatephishingsitebywebsite reply to a user-domain updatephishingsitebywebsite response. Primarily useful in a client.
func DecodeGRPCUpdatePhishingSiteByWebsiteResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.UpdatePhishingSiteByWebsiteResponse)
	return reply, nil
}

// DecodeGRPCPhishingCheckResponse is a transport/grpc.DecodeResponseFunc that converts a
// gRPC phishingcheck reply to a user-domain phishingcheck response. Primarily useful in a client.
func DecodeGRPCPhishingCheckResponse(_ context.Context, grpcReply interface{}) (interface{}, error) {
	reply := grpcReply.(*pb.PhishingCheckResponse)
	return reply, nil
}

// GRPC Client Encode

// EncodeGRPCWebsiteCategoryListRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain websitecategorylist request to a gRPC websitecategorylist request. Primarily useful in a client.
func EncodeGRPCWebsiteCategoryListRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.WebsiteCategoryListRequest)
	return req, nil
}

// EncodeGRPCWebsitePageRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain websitepage request to a gRPC websitepage request. Primarily useful in a client.
func EncodeGRPCWebsitePageRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.WebsitePageRequest)
	return req, nil
}

// EncodeGRPCWebsiteSearchRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain websitesearch request to a gRPC websitesearch request. Primarily useful in a client.
func EncodeGRPCWebsiteSearchRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.WebsiteSearchRequest)
	return req, nil
}

// EncodeGRPCWebsiteRecommendRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain websiterecommend request to a gRPC websiterecommend request. Primarily useful in a client.
func EncodeGRPCWebsiteRecommendRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.WebsiteRecommendRequest)
	return req, nil
}

// EncodeGRPCWebsiteImportRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain websiteimport request to a gRPC websiteimport request. Primarily useful in a client.
func EncodeGRPCWebsiteImportRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.WebsiteImportRequest)
	return req, nil
}

// EncodeGRPCUpdateMetaMaskPhishingRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updatemetamaskphishing request to a gRPC updatemetamaskphishing request. Primarily useful in a client.
func EncodeGRPCUpdateMetaMaskPhishingRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdateMetaMaskPhishingRequest)
	return req, nil
}

// EncodeGRPCUpdatePhishingSiteBlackOriginRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updatephishingsiteblackorigin request to a gRPC updatephishingsiteblackorigin request. Primarily useful in a client.
func EncodeGRPCUpdatePhishingSiteBlackOriginRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdatePhishingSiteBlackOriginRequest)
	return req, nil
}

// EncodeGRPCUpdatePhishingOriginByWebSiteRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updatephishingoriginbywebsite request to a gRPC updatephishingoriginbywebsite request. Primarily useful in a client.
func EncodeGRPCUpdatePhishingOriginByWebSiteRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdatePhishingOriginByWebSiteRequest)
	return req, nil
}

// EncodeGRPCUpdatePhishingSiteByWebsiteRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain updatephishingsitebywebsite request to a gRPC updatephishingsitebywebsite request. Primarily useful in a client.
func EncodeGRPCUpdatePhishingSiteByWebsiteRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.UpdatePhishingSiteByWebsiteRequest)
	return req, nil
}

// EncodeGRPCPhishingCheckRequest is a transport/grpc.EncodeRequestFunc that converts a
// user-domain phishingcheck request to a gRPC phishingcheck request. Primarily useful in a client.
func EncodeGRPCPhishingCheckRequest(_ context.Context, request interface{}) (interface{}, error) {
	req := request.(*pb.PhishingCheckRequest)
	return req, nil
}

type clientConfig struct {
	headers []string
}

// ClientOption is a function that modifies the client config
type ClientOption func(*clientConfig) error

func CtxValuesToSend(keys ...string) ClientOption {
	return func(o *clientConfig) error {
		o.headers = keys
		return nil
	}
}

func contextValuesToGRPCMetadata(keys []string) grpctransport.ClientRequestFunc {
	return func(ctx context.Context, md *metadata.MD) context.Context {
		var pairs []string
		for _, k := range keys {
			if v, ok := ctx.Value(k).(string); ok {
				pairs = append(pairs, k, v)
			}
		}

		if pairs != nil {
			*md = metadata.Join(*md, metadata.Pairs(pairs...))
		}

		return ctx
	}
}
