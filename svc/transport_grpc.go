// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 5f7d5bf015
// Version Date: Fri Nov 26 09:27:01 UTC 2021

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "github.com/mises-id/mises-websitesvc/proto"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC WebsitesvcServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.WebsitesvcServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// websitesvc

		websitecategorylist: grpctransport.NewServer(
			endpoints.WebsiteCategoryListEndpoint,
			DecodeGRPCWebsiteCategoryListRequest,
			EncodeGRPCWebsiteCategoryListResponse,
			serverOptions...,
		),
		websitepage: grpctransport.NewServer(
			endpoints.WebsitePageEndpoint,
			DecodeGRPCWebsitePageRequest,
			EncodeGRPCWebsitePageResponse,
			serverOptions...,
		),
		websiterecommend: grpctransport.NewServer(
			endpoints.WebsiteRecommendEndpoint,
			DecodeGRPCWebsiteRecommendRequest,
			EncodeGRPCWebsiteRecommendResponse,
			serverOptions...,
		),
		websiteimport: grpctransport.NewServer(
			endpoints.WebsiteImportEndpoint,
			DecodeGRPCWebsiteImportRequest,
			EncodeGRPCWebsiteImportResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the WebsitesvcServer interface
type grpcServer struct {
	websitecategorylist grpctransport.Handler
	websitepage         grpctransport.Handler
	websiterecommend    grpctransport.Handler
	websiteimport       grpctransport.Handler
}

// Methods for grpcServer to implement WebsitesvcServer interface

func (s *grpcServer) WebsiteCategoryList(ctx context.Context, req *pb.WebsiteCategoryListRequest) (*pb.WebsiteCategoryListResponse, error) {
	_, rep, err := s.websitecategorylist.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.WebsiteCategoryListResponse), nil
}

func (s *grpcServer) WebsitePage(ctx context.Context, req *pb.WebsitePageRequest) (*pb.WebsitePageResponse, error) {
	_, rep, err := s.websitepage.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.WebsitePageResponse), nil
}

func (s *grpcServer) WebsiteRecommend(ctx context.Context, req *pb.WebsiteRecommendRequest) (*pb.WebsiteRecommendResponse, error) {
	_, rep, err := s.websiterecommend.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.WebsiteRecommendResponse), nil
}

func (s *grpcServer) WebsiteImport(ctx context.Context, req *pb.WebsiteImportRequest) (*pb.WebsiteImportResponse, error) {
	_, rep, err := s.websiteimport.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.WebsiteImportResponse), nil
}

// Server Decode

// DecodeGRPCWebsiteCategoryListRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC websitecategorylist request to a user-domain websitecategorylist request. Primarily useful in a server.
func DecodeGRPCWebsiteCategoryListRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.WebsiteCategoryListRequest)
	return req, nil
}

// DecodeGRPCWebsitePageRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC websitepage request to a user-domain websitepage request. Primarily useful in a server.
func DecodeGRPCWebsitePageRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.WebsitePageRequest)
	return req, nil
}

// DecodeGRPCWebsiteRecommendRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC websiterecommend request to a user-domain websiterecommend request. Primarily useful in a server.
func DecodeGRPCWebsiteRecommendRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.WebsiteRecommendRequest)
	return req, nil
}

// DecodeGRPCWebsiteImportRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC websiteimport request to a user-domain websiteimport request. Primarily useful in a server.
func DecodeGRPCWebsiteImportRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.WebsiteImportRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCWebsiteCategoryListResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain websitecategorylist response to a gRPC websitecategorylist reply. Primarily useful in a server.
func EncodeGRPCWebsiteCategoryListResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.WebsiteCategoryListResponse)
	return resp, nil
}

// EncodeGRPCWebsitePageResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain websitepage response to a gRPC websitepage reply. Primarily useful in a server.
func EncodeGRPCWebsitePageResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.WebsitePageResponse)
	return resp, nil
}

// EncodeGRPCWebsiteRecommendResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain websiterecommend response to a gRPC websiterecommend reply. Primarily useful in a server.
func EncodeGRPCWebsiteRecommendResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.WebsiteRecommendResponse)
	return resp, nil
}

// EncodeGRPCWebsiteImportResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain websiteimport response to a gRPC websiteimport reply. Primarily useful in a server.
func EncodeGRPCWebsiteImportResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.WebsiteImportResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
