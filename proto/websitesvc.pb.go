// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: websitesvc.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package websitesvc

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type WebsiteCategoryListRequest struct {
	ListNum uint64 `protobuf:"varint,1,opt,name=list_num,json=listNum,proto3" json:"list_num,omitempty"`
}

func (m *WebsiteCategoryListRequest) Reset()         { *m = WebsiteCategoryListRequest{} }
func (m *WebsiteCategoryListRequest) String() string { return proto.CompactTextString(m) }
func (*WebsiteCategoryListRequest) ProtoMessage()    {}
func (*WebsiteCategoryListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{0}
}
func (m *WebsiteCategoryListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteCategoryListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteCategoryListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteCategoryListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteCategoryListRequest.Merge(m, src)
}
func (m *WebsiteCategoryListRequest) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteCategoryListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteCategoryListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteCategoryListRequest proto.InternalMessageInfo

func (m *WebsiteCategoryListRequest) GetListNum() uint64 {
	if m != nil {
		return m.ListNum
	}
	return 0
}

type WebsiteCategoryListResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *WebsiteCategoryListResponse) Reset()         { *m = WebsiteCategoryListResponse{} }
func (m *WebsiteCategoryListResponse) String() string { return proto.CompactTextString(m) }
func (*WebsiteCategoryListResponse) ProtoMessage()    {}
func (*WebsiteCategoryListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{1}
}
func (m *WebsiteCategoryListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteCategoryListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteCategoryListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteCategoryListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteCategoryListResponse.Merge(m, src)
}
func (m *WebsiteCategoryListResponse) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteCategoryListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteCategoryListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteCategoryListResponse proto.InternalMessageInfo

func (m *WebsiteCategoryListResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func init() {
	proto.RegisterType((*WebsiteCategoryListRequest)(nil), "websitesvc.WebsiteCategoryListRequest")
	proto.RegisterType((*WebsiteCategoryListResponse)(nil), "websitesvc.WebsiteCategoryListResponse")
}

func init() { proto.RegisterFile("websitesvc.proto", fileDescriptor_7f6b9bd7fb837846) }

var fileDescriptor_7f6b9bd7fb837846 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x28, 0x4f, 0x4d, 0x2a,
	0xce, 0x2c, 0x49, 0x2d, 0x2e, 0x4b, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x42, 0x88,
	0x48, 0xb9, 0xa6, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9, 0x25, 0xe7, 0xe7, 0xea, 0xe7, 0xa6, 0x96,
	0x24, 0x96, 0xa5, 0x16, 0x15, 0xa7, 0xea, 0x97, 0x14, 0x95, 0x16, 0x17, 0xeb, 0xa7, 0xa4, 0xa6,
	0x95, 0x14, 0xa5, 0xa6, 0xea, 0xa7, 0xe7, 0xe7, 0xa7, 0xe7, 0xa4, 0x96, 0x64, 0x64, 0x16, 0xa5,
	0x14, 0x24, 0x16, 0x95, 0x54, 0xea, 0x27, 0xe6, 0xe5, 0xe5, 0x97, 0x24, 0x96, 0x64, 0xe6, 0xe7,
	0x15, 0x43, 0x8c, 0x54, 0x32, 0xe7, 0x92, 0x0a, 0x87, 0x18, 0xea, 0x9c, 0x58, 0x92, 0x9a, 0x9e,
	0x5f, 0x54, 0xe9, 0x93, 0x59, 0x5c, 0x12, 0x94, 0x5a, 0x58, 0x9a, 0x5a, 0x5c, 0x22, 0x24, 0xc9,
	0xc5, 0x91, 0x93, 0x59, 0x5c, 0x12, 0x9f, 0x57, 0x9a, 0x2b, 0xc1, 0xa8, 0xc0, 0xa8, 0xc1, 0x12,
	0xc4, 0x0e, 0xe2, 0xfb, 0x95, 0xe6, 0x2a, 0x19, 0x72, 0x49, 0x63, 0xd5, 0x58, 0x5c, 0x90, 0x9f,
	0x57, 0x9c, 0x2a, 0x24, 0xc4, 0xc5, 0x92, 0x9c, 0x9f, 0x92, 0x0a, 0xd5, 0x05, 0x66, 0x1b, 0x6d,
	0x60, 0xe4, 0xe2, 0x0a, 0x87, 0xfb, 0x40, 0x68, 0x21, 0x23, 0x97, 0x30, 0x16, 0x23, 0x84, 0xd4,
	0xf4, 0x90, 0x3c, 0x8e, 0xdb, 0x71, 0x52, 0xea, 0x04, 0xd5, 0x41, 0xdc, 0xa2, 0x64, 0xd9, 0x74,
	0xf9, 0xc9, 0x64, 0x26, 0x63, 0x21, 0x31, 0x7d, 0xa8, 0x86, 0xf8, 0x64, 0xa8, 0x32, 0x7d, 0x90,
	0x6f, 0xa2, 0x24, 0x85, 0xc4, 0xb1, 0xcb, 0xe8, 0x3b, 0x49, 0x9c, 0x78, 0x24, 0xc7, 0x78, 0xe1,
	0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7, 0x70,
	0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0x38, 0xfc, 0x8c, 0x01, 0x01, 0x00, 0x00, 0xff, 0xff, 0xde,
	0x26, 0xfb, 0x54, 0xa6, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebsitesvcClient is the client API for Websitesvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebsitesvcClient interface {
	WebsiteCategoryList(ctx context.Context, in *WebsiteCategoryListRequest, opts ...grpc.CallOption) (*WebsiteCategoryListResponse, error)
}

type websitesvcClient struct {
	cc *grpc.ClientConn
}

func NewWebsitesvcClient(cc *grpc.ClientConn) WebsitesvcClient {
	return &websitesvcClient{cc}
}

func (c *websitesvcClient) WebsiteCategoryList(ctx context.Context, in *WebsiteCategoryListRequest, opts ...grpc.CallOption) (*WebsiteCategoryListResponse, error) {
	out := new(WebsiteCategoryListResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/WebsiteCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsitesvcServer is the server API for Websitesvc service.
type WebsitesvcServer interface {
	WebsiteCategoryList(context.Context, *WebsiteCategoryListRequest) (*WebsiteCategoryListResponse, error)
}

// UnimplementedWebsitesvcServer can be embedded to have forward compatible implementations.
type UnimplementedWebsitesvcServer struct {
}

func (*UnimplementedWebsitesvcServer) WebsiteCategoryList(ctx context.Context, req *WebsiteCategoryListRequest) (*WebsiteCategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteCategoryList not implemented")
}

func RegisterWebsitesvcServer(s *grpc.Server, srv WebsitesvcServer) {
	s.RegisterService(&_Websitesvc_serviceDesc, srv)
}

func _Websitesvc_WebsiteCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsiteCategoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).WebsiteCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/WebsiteCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).WebsiteCategoryList(ctx, req.(*WebsiteCategoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Websitesvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "websitesvc.Websitesvc",
	HandlerType: (*WebsitesvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebsiteCategoryList",
			Handler:    _Websitesvc_WebsiteCategoryList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "websitesvc.proto",
}

func (m *WebsiteCategoryListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteCategoryListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ListNum != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.ListNum))
	}
	return i, nil
}

func (m *WebsiteCategoryListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteCategoryListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func encodeVarintWebsitesvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *WebsiteCategoryListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ListNum != 0 {
		n += 1 + sovWebsitesvc(uint64(m.ListNum))
	}
	return n
}

func (m *WebsiteCategoryListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	return n
}

func sovWebsitesvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebsitesvc(x uint64) (n int) {
	return sovWebsitesvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *WebsiteCategoryListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteCategoryListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteCategoryListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListNum", wireType)
			}
			m.ListNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteCategoryListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteCategoryListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteCategoryListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebsitesvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebsitesvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWebsitesvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWebsitesvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWebsitesvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWebsitesvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWebsitesvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebsitesvc   = fmt.Errorf("proto: integer overflow")
)
