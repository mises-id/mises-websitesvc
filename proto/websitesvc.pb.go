// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: websitesvc.proto

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".

package websitesvc

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/metaverse/truss/deftree/googlethirdparty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type PageQuick struct {
	Limit  uint64 `protobuf:"varint,1,opt,name=limit,proto3" json:"limit,omitempty"`
	NextId string `protobuf:"bytes,2,opt,name=next_id,json=nextId,proto3" json:"next_id,omitempty"`
	Total  uint64 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
}

func (m *PageQuick) Reset()         { *m = PageQuick{} }
func (m *PageQuick) String() string { return proto.CompactTextString(m) }
func (*PageQuick) ProtoMessage()    {}
func (*PageQuick) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{0}
}
func (m *PageQuick) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PageQuick) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PageQuick.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PageQuick) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PageQuick.Merge(m, src)
}
func (m *PageQuick) XXX_Size() int {
	return m.Size()
}
func (m *PageQuick) XXX_DiscardUnknown() {
	xxx_messageInfo_PageQuick.DiscardUnknown(m)
}

var xxx_messageInfo_PageQuick proto.InternalMessageInfo

func (m *PageQuick) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *PageQuick) GetNextId() string {
	if m != nil {
		return m.NextId
	}
	return ""
}

func (m *PageQuick) GetTotal() uint64 {
	if m != nil {
		return m.Total
	}
	return 0
}

type Page struct {
	TotalRecords uint64 `protobuf:"varint,1,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	PageSize     uint64 `protobuf:"varint,2,opt,name=page_size,json=pageSize,proto3" json:"page_size,omitempty"`
	PageNum      uint64 `protobuf:"varint,3,opt,name=page_num,json=pageNum,proto3" json:"page_num,omitempty"`
	TotalPage    uint64 `protobuf:"varint,4,opt,name=total_page,json=totalPage,proto3" json:"total_page,omitempty"`
}

func (m *Page) Reset()         { *m = Page{} }
func (m *Page) String() string { return proto.CompactTextString(m) }
func (*Page) ProtoMessage()    {}
func (*Page) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{1}
}
func (m *Page) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Page) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Page.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Page) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Page.Merge(m, src)
}
func (m *Page) XXX_Size() int {
	return m.Size()
}
func (m *Page) XXX_DiscardUnknown() {
	xxx_messageInfo_Page.DiscardUnknown(m)
}

var xxx_messageInfo_Page proto.InternalMessageInfo

func (m *Page) GetTotalRecords() uint64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

func (m *Page) GetPageSize() uint64 {
	if m != nil {
		return m.PageSize
	}
	return 0
}

func (m *Page) GetPageNum() uint64 {
	if m != nil {
		return m.PageNum
	}
	return 0
}

func (m *Page) GetTotalPage() uint64 {
	if m != nil {
		return m.TotalPage
	}
	return 0
}

type WebsiteCategoryListRequest struct {
	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ListNum uint64 `protobuf:"varint,2,opt,name=list_num,json=listNum,proto3" json:"list_num,omitempty"`
}

func (m *WebsiteCategoryListRequest) Reset()         { *m = WebsiteCategoryListRequest{} }
func (m *WebsiteCategoryListRequest) String() string { return proto.CompactTextString(m) }
func (*WebsiteCategoryListRequest) ProtoMessage()    {}
func (*WebsiteCategoryListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{2}
}
func (m *WebsiteCategoryListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteCategoryListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteCategoryListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteCategoryListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteCategoryListRequest.Merge(m, src)
}
func (m *WebsiteCategoryListRequest) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteCategoryListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteCategoryListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteCategoryListRequest proto.InternalMessageInfo

func (m *WebsiteCategoryListRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WebsiteCategoryListRequest) GetListNum() uint64 {
	if m != nil {
		return m.ListNum
	}
	return 0
}

type WebsiteCategory struct {
	Id               string             `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name             string             `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Desc             string             `protobuf:"bytes,3,opt,name=desc,proto3" json:"desc,omitempty"`
	TypeString       string             `protobuf:"bytes,4,opt,name=type_string,json=typeString,proto3" json:"type_string,omitempty"`
	ShorterName      string             `protobuf:"bytes,5,opt,name=shorter_name,json=shorterName,proto3" json:"shorter_name,omitempty"`
	ParentId         string             `protobuf:"bytes,6,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty"`
	ChildrenCategory []*WebsiteCategory `protobuf:"bytes,7,rep,name=children_category,json=childrenCategory,proto3" json:"children_category,omitempty"`
}

func (m *WebsiteCategory) Reset()         { *m = WebsiteCategory{} }
func (m *WebsiteCategory) String() string { return proto.CompactTextString(m) }
func (*WebsiteCategory) ProtoMessage()    {}
func (*WebsiteCategory) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{3}
}
func (m *WebsiteCategory) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteCategory) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteCategory.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteCategory) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteCategory.Merge(m, src)
}
func (m *WebsiteCategory) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteCategory) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteCategory.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteCategory proto.InternalMessageInfo

func (m *WebsiteCategory) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *WebsiteCategory) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *WebsiteCategory) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *WebsiteCategory) GetTypeString() string {
	if m != nil {
		return m.TypeString
	}
	return ""
}

func (m *WebsiteCategory) GetShorterName() string {
	if m != nil {
		return m.ShorterName
	}
	return ""
}

func (m *WebsiteCategory) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *WebsiteCategory) GetChildrenCategory() []*WebsiteCategory {
	if m != nil {
		return m.ChildrenCategory
	}
	return nil
}

type WebsiteCategoryListResponse struct {
	Code uint64             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data []*WebsiteCategory `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *WebsiteCategoryListResponse) Reset()         { *m = WebsiteCategoryListResponse{} }
func (m *WebsiteCategoryListResponse) String() string { return proto.CompactTextString(m) }
func (*WebsiteCategoryListResponse) ProtoMessage()    {}
func (*WebsiteCategoryListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{4}
}
func (m *WebsiteCategoryListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteCategoryListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteCategoryListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteCategoryListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteCategoryListResponse.Merge(m, src)
}
func (m *WebsiteCategoryListResponse) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteCategoryListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteCategoryListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteCategoryListResponse proto.InternalMessageInfo

func (m *WebsiteCategoryListResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WebsiteCategoryListResponse) GetData() []*WebsiteCategory {
	if m != nil {
		return m.Data
	}
	return nil
}

type WebsitePageRequest struct {
	Type              string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	WebsiteCategoryId string `protobuf:"bytes,2,opt,name=website_category_id,json=websiteCategoryId,proto3" json:"website_category_id,omitempty"`
	Keywords          string `protobuf:"bytes,3,opt,name=Keywords,proto3" json:"Keywords,omitempty"`
	Paginator         *Page  `protobuf:"bytes,4,opt,name=paginator,proto3" json:"paginator,omitempty"`
	SubcategoryId     string `protobuf:"bytes,5,opt,name=subcategory_id,json=subcategoryId,proto3" json:"subcategory_id,omitempty"`
}

func (m *WebsitePageRequest) Reset()         { *m = WebsitePageRequest{} }
func (m *WebsitePageRequest) String() string { return proto.CompactTextString(m) }
func (*WebsitePageRequest) ProtoMessage()    {}
func (*WebsitePageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{5}
}
func (m *WebsitePageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsitePageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsitePageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsitePageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsitePageRequest.Merge(m, src)
}
func (m *WebsitePageRequest) XXX_Size() int {
	return m.Size()
}
func (m *WebsitePageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsitePageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WebsitePageRequest proto.InternalMessageInfo

func (m *WebsitePageRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WebsitePageRequest) GetWebsiteCategoryId() string {
	if m != nil {
		return m.WebsiteCategoryId
	}
	return ""
}

func (m *WebsitePageRequest) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

func (m *WebsitePageRequest) GetPaginator() *Page {
	if m != nil {
		return m.Paginator
	}
	return nil
}

func (m *WebsitePageRequest) GetSubcategoryId() string {
	if m != nil {
		return m.SubcategoryId
	}
	return ""
}

type WebsitePageResponse struct {
	Code      uint64     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data      []*Website `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
	Paginator *Page      `protobuf:"bytes,3,opt,name=paginator,proto3" json:"paginator,omitempty"`
}

func (m *WebsitePageResponse) Reset()         { *m = WebsitePageResponse{} }
func (m *WebsitePageResponse) String() string { return proto.CompactTextString(m) }
func (*WebsitePageResponse) ProtoMessage()    {}
func (*WebsitePageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{6}
}
func (m *WebsitePageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsitePageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsitePageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsitePageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsitePageResponse.Merge(m, src)
}
func (m *WebsitePageResponse) XXX_Size() int {
	return m.Size()
}
func (m *WebsitePageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsitePageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WebsitePageResponse proto.InternalMessageInfo

func (m *WebsitePageResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WebsitePageResponse) GetData() []*Website {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *WebsitePageResponse) GetPaginator() *Page {
	if m != nil {
		return m.Paginator
	}
	return nil
}

type WebsiteSearchRequest struct {
	Type     string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Keywords string `protobuf:"bytes,2,opt,name=keywords,proto3" json:"keywords,omitempty"`
}

func (m *WebsiteSearchRequest) Reset()         { *m = WebsiteSearchRequest{} }
func (m *WebsiteSearchRequest) String() string { return proto.CompactTextString(m) }
func (*WebsiteSearchRequest) ProtoMessage()    {}
func (*WebsiteSearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{7}
}
func (m *WebsiteSearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteSearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteSearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteSearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteSearchRequest.Merge(m, src)
}
func (m *WebsiteSearchRequest) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteSearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteSearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteSearchRequest proto.InternalMessageInfo

func (m *WebsiteSearchRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WebsiteSearchRequest) GetKeywords() string {
	if m != nil {
		return m.Keywords
	}
	return ""
}

type WebsiteSearchResponse struct {
	Code uint64     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data []*Website `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *WebsiteSearchResponse) Reset()         { *m = WebsiteSearchResponse{} }
func (m *WebsiteSearchResponse) String() string { return proto.CompactTextString(m) }
func (*WebsiteSearchResponse) ProtoMessage()    {}
func (*WebsiteSearchResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{8}
}
func (m *WebsiteSearchResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteSearchResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteSearchResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteSearchResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteSearchResponse.Merge(m, src)
}
func (m *WebsiteSearchResponse) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteSearchResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteSearchResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteSearchResponse proto.InternalMessageInfo

func (m *WebsiteSearchResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WebsiteSearchResponse) GetData() []*Website {
	if m != nil {
		return m.Data
	}
	return nil
}

type Website struct {
	Id                string           `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	WebsiteCategoryId string           `protobuf:"bytes,2,opt,name=website_category_id,json=websiteCategoryId,proto3" json:"website_category_id,omitempty"`
	Title             string           `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Url               string           `protobuf:"bytes,4,opt,name=url,proto3" json:"url,omitempty"`
	Logo              string           `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty"`
	Desc              string           `protobuf:"bytes,6,opt,name=desc,proto3" json:"desc,omitempty"`
	Type              string           `protobuf:"bytes,7,opt,name=type,proto3" json:"type,omitempty"`
	WebsiteCategory   *WebsiteCategory `protobuf:"bytes,8,opt,name=website_category,json=websiteCategory,proto3" json:"website_category,omitempty"`
	Subcategory       *WebsiteCategory `protobuf:"bytes,9,opt,name=subcategory,proto3" json:"subcategory,omitempty"`
	SubcategoryId     string           `protobuf:"bytes,10,opt,name=subcategory_id,json=subcategoryId,proto3" json:"subcategory_id,omitempty"`
}

func (m *Website) Reset()         { *m = Website{} }
func (m *Website) String() string { return proto.CompactTextString(m) }
func (*Website) ProtoMessage()    {}
func (*Website) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{9}
}
func (m *Website) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Website) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Website.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Website) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Website.Merge(m, src)
}
func (m *Website) XXX_Size() int {
	return m.Size()
}
func (m *Website) XXX_DiscardUnknown() {
	xxx_messageInfo_Website.DiscardUnknown(m)
}

var xxx_messageInfo_Website proto.InternalMessageInfo

func (m *Website) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Website) GetWebsiteCategoryId() string {
	if m != nil {
		return m.WebsiteCategoryId
	}
	return ""
}

func (m *Website) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Website) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Website) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

func (m *Website) GetDesc() string {
	if m != nil {
		return m.Desc
	}
	return ""
}

func (m *Website) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Website) GetWebsiteCategory() *WebsiteCategory {
	if m != nil {
		return m.WebsiteCategory
	}
	return nil
}

func (m *Website) GetSubcategory() *WebsiteCategory {
	if m != nil {
		return m.Subcategory
	}
	return nil
}

func (m *Website) GetSubcategoryId() string {
	if m != nil {
		return m.SubcategoryId
	}
	return ""
}

type WebsiteRecommendRequest struct {
	Type    string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	ListNum uint64 `protobuf:"varint,2,opt,name=list_num,json=listNum,proto3" json:"list_num,omitempty"`
}

func (m *WebsiteRecommendRequest) Reset()         { *m = WebsiteRecommendRequest{} }
func (m *WebsiteRecommendRequest) String() string { return proto.CompactTextString(m) }
func (*WebsiteRecommendRequest) ProtoMessage()    {}
func (*WebsiteRecommendRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{10}
}
func (m *WebsiteRecommendRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteRecommendRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteRecommendRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteRecommendRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteRecommendRequest.Merge(m, src)
}
func (m *WebsiteRecommendRequest) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteRecommendRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteRecommendRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteRecommendRequest proto.InternalMessageInfo

func (m *WebsiteRecommendRequest) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *WebsiteRecommendRequest) GetListNum() uint64 {
	if m != nil {
		return m.ListNum
	}
	return 0
}

type WebsiteRecommendResponse struct {
	Code uint64     `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Data []*Website `protobuf:"bytes,2,rep,name=data,proto3" json:"data,omitempty"`
}

func (m *WebsiteRecommendResponse) Reset()         { *m = WebsiteRecommendResponse{} }
func (m *WebsiteRecommendResponse) String() string { return proto.CompactTextString(m) }
func (*WebsiteRecommendResponse) ProtoMessage()    {}
func (*WebsiteRecommendResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{11}
}
func (m *WebsiteRecommendResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteRecommendResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteRecommendResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteRecommendResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteRecommendResponse.Merge(m, src)
}
func (m *WebsiteRecommendResponse) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteRecommendResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteRecommendResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteRecommendResponse proto.InternalMessageInfo

func (m *WebsiteRecommendResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *WebsiteRecommendResponse) GetData() []*Website {
	if m != nil {
		return m.Data
	}
	return nil
}

type WebsiteImportRequest struct {
	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
}

func (m *WebsiteImportRequest) Reset()         { *m = WebsiteImportRequest{} }
func (m *WebsiteImportRequest) String() string { return proto.CompactTextString(m) }
func (*WebsiteImportRequest) ProtoMessage()    {}
func (*WebsiteImportRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{12}
}
func (m *WebsiteImportRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteImportRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteImportRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteImportRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteImportRequest.Merge(m, src)
}
func (m *WebsiteImportRequest) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteImportRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteImportRequest.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteImportRequest proto.InternalMessageInfo

func (m *WebsiteImportRequest) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

type WebsiteImportResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *WebsiteImportResponse) Reset()         { *m = WebsiteImportResponse{} }
func (m *WebsiteImportResponse) String() string { return proto.CompactTextString(m) }
func (*WebsiteImportResponse) ProtoMessage()    {}
func (*WebsiteImportResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{13}
}
func (m *WebsiteImportResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *WebsiteImportResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_WebsiteImportResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *WebsiteImportResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WebsiteImportResponse.Merge(m, src)
}
func (m *WebsiteImportResponse) XXX_Size() int {
	return m.Size()
}
func (m *WebsiteImportResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_WebsiteImportResponse.DiscardUnknown(m)
}

var xxx_messageInfo_WebsiteImportResponse proto.InternalMessageInfo

func (m *WebsiteImportResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdateMetaMaskPhishingRequest struct {
}

func (m *UpdateMetaMaskPhishingRequest) Reset()         { *m = UpdateMetaMaskPhishingRequest{} }
func (m *UpdateMetaMaskPhishingRequest) String() string { return proto.CompactTextString(m) }
func (*UpdateMetaMaskPhishingRequest) ProtoMessage()    {}
func (*UpdateMetaMaskPhishingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{14}
}
func (m *UpdateMetaMaskPhishingRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMetaMaskPhishingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMetaMaskPhishingRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMetaMaskPhishingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMetaMaskPhishingRequest.Merge(m, src)
}
func (m *UpdateMetaMaskPhishingRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMetaMaskPhishingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMetaMaskPhishingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMetaMaskPhishingRequest proto.InternalMessageInfo

type UpdateMetaMaskPhishingResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *UpdateMetaMaskPhishingResponse) Reset()         { *m = UpdateMetaMaskPhishingResponse{} }
func (m *UpdateMetaMaskPhishingResponse) String() string { return proto.CompactTextString(m) }
func (*UpdateMetaMaskPhishingResponse) ProtoMessage()    {}
func (*UpdateMetaMaskPhishingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{15}
}
func (m *UpdateMetaMaskPhishingResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdateMetaMaskPhishingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdateMetaMaskPhishingResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdateMetaMaskPhishingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdateMetaMaskPhishingResponse.Merge(m, src)
}
func (m *UpdateMetaMaskPhishingResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdateMetaMaskPhishingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdateMetaMaskPhishingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdateMetaMaskPhishingResponse proto.InternalMessageInfo

func (m *UpdateMetaMaskPhishingResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdatePhishingOriginByWebSiteRequest struct {
}

func (m *UpdatePhishingOriginByWebSiteRequest) Reset()         { *m = UpdatePhishingOriginByWebSiteRequest{} }
func (m *UpdatePhishingOriginByWebSiteRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePhishingOriginByWebSiteRequest) ProtoMessage()    {}
func (*UpdatePhishingOriginByWebSiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{16}
}
func (m *UpdatePhishingOriginByWebSiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePhishingOriginByWebSiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePhishingOriginByWebSiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePhishingOriginByWebSiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePhishingOriginByWebSiteRequest.Merge(m, src)
}
func (m *UpdatePhishingOriginByWebSiteRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePhishingOriginByWebSiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePhishingOriginByWebSiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePhishingOriginByWebSiteRequest proto.InternalMessageInfo

type UpdatePhishingOriginByWebSiteResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *UpdatePhishingOriginByWebSiteResponse) Reset()         { *m = UpdatePhishingOriginByWebSiteResponse{} }
func (m *UpdatePhishingOriginByWebSiteResponse) String() string { return proto.CompactTextString(m) }
func (*UpdatePhishingOriginByWebSiteResponse) ProtoMessage()    {}
func (*UpdatePhishingOriginByWebSiteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{17}
}
func (m *UpdatePhishingOriginByWebSiteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePhishingOriginByWebSiteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePhishingOriginByWebSiteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePhishingOriginByWebSiteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePhishingOriginByWebSiteResponse.Merge(m, src)
}
func (m *UpdatePhishingOriginByWebSiteResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePhishingOriginByWebSiteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePhishingOriginByWebSiteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePhishingOriginByWebSiteResponse proto.InternalMessageInfo

func (m *UpdatePhishingOriginByWebSiteResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdatePhishingSiteBlackOriginRequest struct {
}

func (m *UpdatePhishingSiteBlackOriginRequest) Reset()         { *m = UpdatePhishingSiteBlackOriginRequest{} }
func (m *UpdatePhishingSiteBlackOriginRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePhishingSiteBlackOriginRequest) ProtoMessage()    {}
func (*UpdatePhishingSiteBlackOriginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{18}
}
func (m *UpdatePhishingSiteBlackOriginRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePhishingSiteBlackOriginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePhishingSiteBlackOriginRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePhishingSiteBlackOriginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePhishingSiteBlackOriginRequest.Merge(m, src)
}
func (m *UpdatePhishingSiteBlackOriginRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePhishingSiteBlackOriginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePhishingSiteBlackOriginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePhishingSiteBlackOriginRequest proto.InternalMessageInfo

type UpdatePhishingSiteBlackOriginResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *UpdatePhishingSiteBlackOriginResponse) Reset()         { *m = UpdatePhishingSiteBlackOriginResponse{} }
func (m *UpdatePhishingSiteBlackOriginResponse) String() string { return proto.CompactTextString(m) }
func (*UpdatePhishingSiteBlackOriginResponse) ProtoMessage()    {}
func (*UpdatePhishingSiteBlackOriginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{19}
}
func (m *UpdatePhishingSiteBlackOriginResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePhishingSiteBlackOriginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePhishingSiteBlackOriginResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePhishingSiteBlackOriginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePhishingSiteBlackOriginResponse.Merge(m, src)
}
func (m *UpdatePhishingSiteBlackOriginResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePhishingSiteBlackOriginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePhishingSiteBlackOriginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePhishingSiteBlackOriginResponse proto.InternalMessageInfo

func (m *UpdatePhishingSiteBlackOriginResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type UpdatePhishingSiteByWebsiteRequest struct {
}

func (m *UpdatePhishingSiteByWebsiteRequest) Reset()         { *m = UpdatePhishingSiteByWebsiteRequest{} }
func (m *UpdatePhishingSiteByWebsiteRequest) String() string { return proto.CompactTextString(m) }
func (*UpdatePhishingSiteByWebsiteRequest) ProtoMessage()    {}
func (*UpdatePhishingSiteByWebsiteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{20}
}
func (m *UpdatePhishingSiteByWebsiteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePhishingSiteByWebsiteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePhishingSiteByWebsiteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePhishingSiteByWebsiteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePhishingSiteByWebsiteRequest.Merge(m, src)
}
func (m *UpdatePhishingSiteByWebsiteRequest) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePhishingSiteByWebsiteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePhishingSiteByWebsiteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePhishingSiteByWebsiteRequest proto.InternalMessageInfo

type UpdatePhishingSiteByWebsiteResponse struct {
	Code uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
}

func (m *UpdatePhishingSiteByWebsiteResponse) Reset()         { *m = UpdatePhishingSiteByWebsiteResponse{} }
func (m *UpdatePhishingSiteByWebsiteResponse) String() string { return proto.CompactTextString(m) }
func (*UpdatePhishingSiteByWebsiteResponse) ProtoMessage()    {}
func (*UpdatePhishingSiteByWebsiteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{21}
}
func (m *UpdatePhishingSiteByWebsiteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UpdatePhishingSiteByWebsiteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UpdatePhishingSiteByWebsiteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UpdatePhishingSiteByWebsiteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UpdatePhishingSiteByWebsiteResponse.Merge(m, src)
}
func (m *UpdatePhishingSiteByWebsiteResponse) XXX_Size() int {
	return m.Size()
}
func (m *UpdatePhishingSiteByWebsiteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UpdatePhishingSiteByWebsiteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UpdatePhishingSiteByWebsiteResponse proto.InternalMessageInfo

func (m *UpdatePhishingSiteByWebsiteResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

type PhishingCheckRequest struct {
	DomainName string `protobuf:"bytes,1,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
}

func (m *PhishingCheckRequest) Reset()         { *m = PhishingCheckRequest{} }
func (m *PhishingCheckRequest) String() string { return proto.CompactTextString(m) }
func (*PhishingCheckRequest) ProtoMessage()    {}
func (*PhishingCheckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{22}
}
func (m *PhishingCheckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhishingCheckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhishingCheckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhishingCheckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhishingCheckRequest.Merge(m, src)
}
func (m *PhishingCheckRequest) XXX_Size() int {
	return m.Size()
}
func (m *PhishingCheckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PhishingCheckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PhishingCheckRequest proto.InternalMessageInfo

func (m *PhishingCheckRequest) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

type PhishingCheckResponse struct {
	Code       uint64 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Type       uint64 `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	TypeString string `protobuf:"bytes,3,opt,name=type_string,json=typeString,proto3" json:"type_string,omitempty"`
	DomainName string `protobuf:"bytes,4,opt,name=domain_name,json=domainName,proto3" json:"domain_name,omitempty"`
	Origin     string `protobuf:"bytes,5,opt,name=origin,proto3" json:"origin,omitempty"`
}

func (m *PhishingCheckResponse) Reset()         { *m = PhishingCheckResponse{} }
func (m *PhishingCheckResponse) String() string { return proto.CompactTextString(m) }
func (*PhishingCheckResponse) ProtoMessage()    {}
func (*PhishingCheckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7f6b9bd7fb837846, []int{23}
}
func (m *PhishingCheckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PhishingCheckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PhishingCheckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PhishingCheckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhishingCheckResponse.Merge(m, src)
}
func (m *PhishingCheckResponse) XXX_Size() int {
	return m.Size()
}
func (m *PhishingCheckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PhishingCheckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PhishingCheckResponse proto.InternalMessageInfo

func (m *PhishingCheckResponse) GetCode() uint64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *PhishingCheckResponse) GetType() uint64 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *PhishingCheckResponse) GetTypeString() string {
	if m != nil {
		return m.TypeString
	}
	return ""
}

func (m *PhishingCheckResponse) GetDomainName() string {
	if m != nil {
		return m.DomainName
	}
	return ""
}

func (m *PhishingCheckResponse) GetOrigin() string {
	if m != nil {
		return m.Origin
	}
	return ""
}

func init() {
	proto.RegisterType((*PageQuick)(nil), "websitesvc.PageQuick")
	proto.RegisterType((*Page)(nil), "websitesvc.Page")
	proto.RegisterType((*WebsiteCategoryListRequest)(nil), "websitesvc.WebsiteCategoryListRequest")
	proto.RegisterType((*WebsiteCategory)(nil), "websitesvc.WebsiteCategory")
	proto.RegisterType((*WebsiteCategoryListResponse)(nil), "websitesvc.WebsiteCategoryListResponse")
	proto.RegisterType((*WebsitePageRequest)(nil), "websitesvc.WebsitePageRequest")
	proto.RegisterType((*WebsitePageResponse)(nil), "websitesvc.WebsitePageResponse")
	proto.RegisterType((*WebsiteSearchRequest)(nil), "websitesvc.WebsiteSearchRequest")
	proto.RegisterType((*WebsiteSearchResponse)(nil), "websitesvc.WebsiteSearchResponse")
	proto.RegisterType((*Website)(nil), "websitesvc.Website")
	proto.RegisterType((*WebsiteRecommendRequest)(nil), "websitesvc.WebsiteRecommendRequest")
	proto.RegisterType((*WebsiteRecommendResponse)(nil), "websitesvc.WebsiteRecommendResponse")
	proto.RegisterType((*WebsiteImportRequest)(nil), "websitesvc.WebsiteImportRequest")
	proto.RegisterType((*WebsiteImportResponse)(nil), "websitesvc.WebsiteImportResponse")
	proto.RegisterType((*UpdateMetaMaskPhishingRequest)(nil), "websitesvc.UpdateMetaMaskPhishingRequest")
	proto.RegisterType((*UpdateMetaMaskPhishingResponse)(nil), "websitesvc.UpdateMetaMaskPhishingResponse")
	proto.RegisterType((*UpdatePhishingOriginByWebSiteRequest)(nil), "websitesvc.UpdatePhishingOriginByWebSiteRequest")
	proto.RegisterType((*UpdatePhishingOriginByWebSiteResponse)(nil), "websitesvc.UpdatePhishingOriginByWebSiteResponse")
	proto.RegisterType((*UpdatePhishingSiteBlackOriginRequest)(nil), "websitesvc.UpdatePhishingSiteBlackOriginRequest")
	proto.RegisterType((*UpdatePhishingSiteBlackOriginResponse)(nil), "websitesvc.UpdatePhishingSiteBlackOriginResponse")
	proto.RegisterType((*UpdatePhishingSiteByWebsiteRequest)(nil), "websitesvc.UpdatePhishingSiteByWebsiteRequest")
	proto.RegisterType((*UpdatePhishingSiteByWebsiteResponse)(nil), "websitesvc.UpdatePhishingSiteByWebsiteResponse")
	proto.RegisterType((*PhishingCheckRequest)(nil), "websitesvc.PhishingCheckRequest")
	proto.RegisterType((*PhishingCheckResponse)(nil), "websitesvc.PhishingCheckResponse")
}

func init() { proto.RegisterFile("websitesvc.proto", fileDescriptor_7f6b9bd7fb837846) }

var fileDescriptor_7f6b9bd7fb837846 = []byte{
	// 1292 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x57, 0xdf, 0x6f, 0xd3, 0xd6,
	0x17, 0xc7, 0x6d, 0x68, 0x9b, 0x13, 0x0a, 0xe1, 0xb4, 0xa5, 0x21, 0x15, 0x69, 0xeb, 0x52, 0xe0,
	0xfb, 0x45, 0xaa, 0x07, 0x6c, 0x9a, 0xd0, 0xb4, 0x17, 0xd0, 0x18, 0x11, 0x83, 0x95, 0x74, 0x53,
	0xa5, 0xbc, 0x58, 0x8e, 0x7d, 0x49, 0xae, 0x12, 0xdb, 0x99, 0x7d, 0x43, 0x17, 0xde, 0xc6, 0xeb,
	0x5e, 0x90, 0x78, 0xda, 0xe3, 0xfe, 0x8d, 0xfd, 0x05, 0x93, 0xa6, 0x49, 0x48, 0x7b, 0xd8, 0xa4,
	0xbd, 0x4c, 0xb0, 0x3f, 0x61, 0x7f, 0xc0, 0x74, 0x7f, 0xd8, 0xb1, 0x1d, 0xc7, 0x81, 0x89, 0xb7,
	0x7b, 0x8f, 0x3f, 0xe7, 0x9c, 0xcf, 0xf9, 0x71, 0xcf, 0x49, 0xa0, 0x7a, 0x42, 0x3a, 0x21, 0x65,
	0x24, 0x7c, 0x6a, 0x1f, 0x0c, 0x03, 0x9f, 0xf9, 0x08, 0x13, 0x49, 0xfd, 0xb3, 0x2e, 0x65, 0xbd,
	0x51, 0xe7, 0xc0, 0xf6, 0x5d, 0xc3, 0x25, 0xcc, 0x7a, 0x4a, 0x82, 0x90, 0x18, 0x2c, 0x18, 0x85,
	0xa1, 0xe1, 0x90, 0x27, 0x2c, 0x20, 0xc4, 0xe8, 0xfa, 0x7e, 0x77, 0x40, 0x58, 0x8f, 0x06, 0xce,
	0xd0, 0x0a, 0xd8, 0xd8, 0xb0, 0x3c, 0xcf, 0x67, 0x16, 0xa3, 0xbe, 0x17, 0x4a, 0x93, 0xfa, 0x21,
	0x94, 0x0f, 0xad, 0x2e, 0x79, 0x3c, 0xa2, 0x76, 0x1f, 0xd7, 0xe1, 0xf4, 0x80, 0xba, 0x94, 0xd5,
	0xb4, 0x1d, 0xed, 0x5a, 0xa9, 0x25, 0x2f, 0xb8, 0x09, 0xcb, 0x1e, 0xf9, 0x96, 0x99, 0xd4, 0xa9,
	0x2d, 0xec, 0x68, 0xd7, 0xca, 0xad, 0x25, 0x7e, 0x6d, 0x3a, 0x1c, 0xce, 0x7c, 0x66, 0x0d, 0x6a,
	0x8b, 0x12, 0x2e, 0x2e, 0xfa, 0x73, 0x0d, 0x4a, 0xdc, 0x24, 0xee, 0xc1, 0xaa, 0x90, 0x98, 0x01,
	0xb1, 0xfd, 0xc0, 0x09, 0x95, 0xd5, 0x33, 0x42, 0xd8, 0x92, 0x32, 0xdc, 0x82, 0xf2, 0xd0, 0xea,
	0x12, 0x33, 0xa4, 0xcf, 0x88, 0x30, 0x5f, 0x6a, 0xad, 0x70, 0xc1, 0x11, 0x7d, 0x46, 0xf0, 0x22,
	0x88, 0xb3, 0xe9, 0x8d, 0x5c, 0xe5, 0x63, 0x99, 0xdf, 0x1f, 0x8d, 0x5c, 0xbc, 0x04, 0x20, 0x8d,
	0x73, 0x41, 0xad, 0x24, 0x3e, 0x96, 0x85, 0x84, 0xfb, 0xd6, 0x1f, 0x40, 0xfd, 0x58, 0xe6, 0xea,
	0xae, 0xc5, 0x48, 0xd7, 0x0f, 0xc6, 0x5f, 0xd0, 0x90, 0xb5, 0xc8, 0x37, 0x23, 0x12, 0x32, 0x44,
	0x28, 0xb1, 0xf1, 0x90, 0x08, 0x42, 0xe5, 0x96, 0x38, 0x73, 0x5f, 0x03, 0x1a, 0x32, 0xe1, 0x4b,
	0xf2, 0x58, 0xe6, 0xf7, 0x47, 0x23, 0x57, 0xff, 0x47, 0x83, 0x73, 0x19, 0x6b, 0x78, 0x16, 0x16,
	0xa8, 0xa3, 0x0c, 0x2c, 0x50, 0x87, 0x9b, 0xf4, 0x2c, 0x97, 0xa8, 0x0c, 0x89, 0x33, 0x97, 0x39,
	0x24, 0xb4, 0x05, 0xf5, 0x72, 0x4b, 0x9c, 0x71, 0x1b, 0x2a, 0xdc, 0x9d, 0x19, 0xb2, 0x80, 0x7a,
	0x5d, 0x41, 0xbc, 0xdc, 0x02, 0x2e, 0x3a, 0x12, 0x12, 0xdc, 0x85, 0x33, 0x61, 0xcf, 0x0f, 0x18,
	0x09, 0x4c, 0x61, 0xf0, 0xb4, 0x40, 0x54, 0x94, 0xec, 0x11, 0xb7, 0x2b, 0x72, 0x16, 0x10, 0x4f,
	0x94, 0x64, 0x49, 0x7c, 0x5f, 0x91, 0x82, 0xa6, 0x83, 0xf7, 0xe1, 0xbc, 0xdd, 0xa3, 0x03, 0x27,
	0x20, 0x9e, 0x69, 0x2b, 0xb6, 0xb5, 0xe5, 0x9d, 0xc5, 0x6b, 0x95, 0x9b, 0x5b, 0x07, 0x89, 0x8e,
	0xca, 0x04, 0xd4, 0xaa, 0x46, 0x5a, 0x91, 0x44, 0xef, 0xc0, 0x56, 0x6e, 0x0e, 0xc3, 0xa1, 0xef,
	0x85, 0x22, 0x3a, 0xdb, 0x77, 0x88, 0xaa, 0xaa, 0x38, 0xa3, 0x01, 0x25, 0xc7, 0x62, 0x56, 0x6d,
	0x61, 0xbe, 0x3f, 0x01, 0xd4, 0x7f, 0xd1, 0x00, 0xd5, 0x17, 0x5e, 0xb7, 0xa2, 0x02, 0x1d, 0xc0,
	0x9a, 0x32, 0x17, 0xc7, 0x35, 0x69, 0xc9, 0xf3, 0x27, 0x69, 0xf3, 0x4d, 0x07, 0xeb, 0xb0, 0xf2,
	0x80, 0x8c, 0x4f, 0x44, 0xe7, 0xc9, 0x0a, 0xc4, 0x77, 0x3c, 0x10, 0x5d, 0x47, 0x3d, 0x8b, 0xf9,
	0x81, 0xa8, 0x41, 0xe5, 0x66, 0x35, 0x49, 0x56, 0x70, 0x99, 0x40, 0x70, 0x1f, 0xce, 0x86, 0xa3,
	0x4e, 0xd2, 0xad, 0x2c, 0xcb, 0x6a, 0x42, 0xda, 0x74, 0x78, 0xeb, 0xaf, 0xa5, 0xa2, 0x29, 0x48,
	0xd5, 0xd5, 0x54, 0xaa, 0xd6, 0x72, 0x52, 0x25, 0x53, 0x94, 0xe6, 0xba, 0x38, 0x97, 0xab, 0x7e,
	0x0f, 0xd6, 0x95, 0x81, 0x23, 0x62, 0x05, 0x76, 0xaf, 0x28, 0xa7, 0x75, 0x58, 0xe9, 0x47, 0x39,
	0x92, 0x89, 0x8c, 0xef, 0xfa, 0x57, 0xb0, 0x91, 0xb1, 0xf3, 0x1e, 0xa2, 0xd1, 0xff, 0x5c, 0x80,
	0x65, 0x25, 0x99, 0x7a, 0x43, 0xef, 0x5a, 0x61, 0x3e, 0x7f, 0x28, 0x1b, 0x10, 0x55, 0x5e, 0x79,
	0xc1, 0x2a, 0x2c, 0x8e, 0x82, 0x81, 0x7a, 0x59, 0xfc, 0xc8, 0x09, 0x0f, 0xfc, 0xae, 0xaf, 0x6a,
	0x26, 0xce, 0xf1, 0xdb, 0x5c, 0x4a, 0xbc, 0xcd, 0x28, 0x43, 0xcb, 0x89, 0x0c, 0xdd, 0x8b, 0xc7,
	0xf0, 0xe4, 0x35, 0xad, 0x88, 0x22, 0x14, 0x76, 0xf7, 0xb9, 0x0c, 0x5b, 0xfc, 0x14, 0x2a, 0x89,
	0x5e, 0xa9, 0x95, 0xe7, 0x9b, 0x48, 0xe2, 0x73, 0x1a, 0x10, 0xf2, 0x1a, 0xf0, 0x3e, 0x6c, 0x46,
	0xe9, 0x26, 0xb6, 0xef, 0xba, 0xc4, 0x73, 0xfe, 0xe3, 0xcc, 0x3b, 0x86, 0xda, 0xb4, 0xa5, 0xf7,
	0xd1, 0x00, 0xb7, 0xe2, 0xf6, 0x6c, 0xba, 0x43, 0x3f, 0x88, 0x67, 0xf2, 0x16, 0x94, 0x9f, 0xd0,
	0x01, 0x31, 0x87, 0x16, 0xeb, 0x29, 0x92, 0x2b, 0x5c, 0x70, 0x68, 0xb1, 0x9e, 0x7e, 0x3d, 0xee,
	0xc5, 0x48, 0x69, 0x36, 0x15, 0x7d, 0x1b, 0x2e, 0x7d, 0x3d, 0x74, 0x2c, 0x46, 0x1e, 0x12, 0x66,
	0x3d, 0xb4, 0xc2, 0xfe, 0x61, 0x8f, 0x86, 0x3d, 0xea, 0x75, 0x95, 0x2b, 0xfd, 0x43, 0x68, 0xcc,
	0x02, 0x14, 0x98, 0xbd, 0x02, 0x97, 0xa5, 0x56, 0x84, 0xfe, 0x32, 0xa0, 0x5d, 0xea, 0xdd, 0x19,
	0x1f, 0x93, 0xce, 0x91, 0xc8, 0x93, 0xb4, 0xfe, 0x09, 0xec, 0xcf, 0xc1, 0xbd, 0x8b, 0x13, 0xae,
	0x71, 0x67, 0x60, 0xd9, 0x7d, 0x69, 0x65, 0xa6, 0x93, 0x29, 0x5c, 0x81, 0x93, 0xcb, 0xa0, 0xe7,
	0x28, 0x8f, 0xe3, 0x7a, 0x4b, 0x17, 0xb7, 0x61, 0xaf, 0x10, 0x55, 0xe0, 0xe0, 0x63, 0x58, 0x8f,
	0x94, 0xee, 0xf6, 0x88, 0xdd, 0x8f, 0x6a, 0xbc, 0x0d, 0x15, 0xc7, 0x77, 0x2d, 0xea, 0xc9, 0xd5,
	0x26, 0xab, 0x0c, 0x52, 0xc4, 0x37, 0x9b, 0xfe, 0x83, 0x06, 0x1b, 0x19, 0xcd, 0x82, 0x9e, 0x8b,
	0x5a, 0x5a, 0xb6, 0xae, 0x6c, 0xe9, 0xcc, 0x7e, 0x5d, 0x9c, 0xda, 0xaf, 0x19, 0x0e, 0xa5, 0x2c,
	0x07, 0xbc, 0x00, 0x4b, 0xbe, 0xc8, 0xa1, 0x9a, 0x17, 0xea, 0x76, 0xf3, 0xe5, 0x2a, 0xc0, 0x71,
	0xdc, 0xd5, 0xf8, 0xe3, 0x64, 0xd6, 0x27, 0xd7, 0x23, 0x5e, 0x29, 0x78, 0xd3, 0x89, 0xdf, 0x20,
	0xf5, 0xab, 0x73, 0x71, 0x32, 0x72, 0xfd, 0xf6, 0xf3, 0xdf, 0xfe, 0x7e, 0xb9, 0x70, 0x0b, 0x2f,
	0x18, 0xd9, 0x41, 0x64, 0xf0, 0xc7, 0xda, 0xbe, 0x88, 0x9b, 0xf9, 0x5f, 0x0c, 0x3c, 0x81, 0x4a,
	0x62, 0x1d, 0x61, 0x23, 0xc7, 0x65, 0x62, 0xeb, 0xd6, 0xb7, 0x67, 0x7e, 0x57, 0x54, 0xae, 0x0a,
	0x2a, 0xbb, 0xb8, 0x1a, 0x39, 0x34, 0xf8, 0xaf, 0xaf, 0x76, 0x15, 0xcf, 0xa6, 0x04, 0x06, 0x7e,
	0xa7, 0xc1, 0x6a, 0x6a, 0x79, 0xe0, 0x4e, 0x8e, 0xed, 0xd4, 0x7e, 0xaa, 0xef, 0x16, 0x20, 0x94,
	0xff, 0xeb, 0xc2, 0xff, 0x3e, 0x9e, 0x8b, 0xdd, 0x85, 0x02, 0xd0, 0x46, 0xac, 0x66, 0x44, 0x06,
	0xbe, 0xd0, 0xa0, 0x9a, 0x1d, 0x61, 0xb8, 0x97, 0x37, 0x98, 0x32, 0xa3, 0xb2, 0x7e, 0xb9, 0x18,
	0xa4, 0xc8, 0xdc, 0x10, 0x64, 0xae, 0x23, 0xc6, 0x9e, 0x83, 0x08, 0xd3, 0xde, 0xc0, 0xb5, 0x69,
	0x69, 0x2a, 0x2d, 0x72, 0x8e, 0xe5, 0xa6, 0x25, 0x35, 0x17, 0x73, 0xd3, 0x92, 0x1e, 0x82, 0x39,
	0x69, 0xa1, 0x02, 0x90, 0x4a, 0x8b, 0x14, 0x19, 0xf8, 0x93, 0x06, 0x17, 0xf2, 0xa7, 0x1f, 0xfe,
	0x2f, 0xe9, 0xaa, 0x70, 0x84, 0xd6, 0xff, 0xff, 0x36, 0x50, 0x45, 0xaf, 0x29, 0xe8, 0xdd, 0xc5,
	0x86, 0x31, 0x54, 0x9f, 0x4c, 0xc1, 0x68, 0x24, 0xd4, 0x4c, 0xfe, 0xe7, 0xc5, 0xb5, 0xc2, 0x7e,
	0x7b, 0x17, 0xb7, 0x8b, 0x11, 0x06, 0xfe, 0xae, 0x45, 0xb3, 0x7d, 0xc6, 0xdc, 0xc3, 0x0f, 0xa6,
	0x89, 0x15, 0x8f, 0xd2, 0xfa, 0x8d, 0x77, 0xd0, 0x50, 0x11, 0x3d, 0x16, 0x11, 0x3d, 0x40, 0x3d,
	0x9f, 0x6f, 0x87, 0xab, 0x98, 0x72, 0x6c, 0xb4, 0xf7, 0x71, 0x6f, 0x3e, 0x2a, 0x2f, 0xb2, 0xcc,
	0xda, 0x28, 0x8a, 0x2c, 0x7f, 0x13, 0x15, 0x45, 0x36, 0x63, 0x27, 0xe5, 0x45, 0xa6, 0x18, 0x46,
	0xac, 0xc7, 0xa6, 0x32, 0x9a, 0x8e, 0x6c, 0x16, 0xca, 0xc0, 0x5f, 0x35, 0xd8, 0x2a, 0x58, 0x24,
	0x78, 0x30, 0x27, 0xff, 0x99, 0xbd, 0x54, 0x37, 0xde, 0x1a, 0xaf, 0x62, 0x7a, 0x28, 0x62, 0xfa,
	0x1c, 0x77, 0x66, 0xd4, 0x61, 0x12, 0xd1, 0x1e, 0xee, 0xce, 0xc3, 0x18, 0xf8, 0xbd, 0x06, 0xab,
	0xa9, 0x1d, 0x95, 0x7e, 0xc4, 0x79, 0x8b, 0x2f, 0xfd, 0x88, 0x73, 0x17, 0x9c, 0xfe, 0x91, 0x60,
	0x69, 0xe0, 0x7a, 0x86, 0x81, 0xcd, 0x51, 0xed, 0x4d, 0xdc, 0xc8, 0x93, 0x1b, 0x77, 0x6a, 0x3f,
	0xbf, 0x6e, 0x68, 0xaf, 0x5e, 0x37, 0xb4, 0xbf, 0x5e, 0x37, 0xb4, 0x17, 0x6f, 0x1a, 0xa7, 0x5e,
	0xbd, 0x69, 0x9c, 0xfa, 0xe3, 0x4d, 0xe3, 0x54, 0x67, 0x49, 0xfc, 0xc1, 0xbf, 0xf5, 0x6f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x97, 0x46, 0x8d, 0xf6, 0x47, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WebsitesvcClient is the client API for Websitesvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WebsitesvcClient interface {
	WebsiteCategoryList(ctx context.Context, in *WebsiteCategoryListRequest, opts ...grpc.CallOption) (*WebsiteCategoryListResponse, error)
	WebsitePage(ctx context.Context, in *WebsitePageRequest, opts ...grpc.CallOption) (*WebsitePageResponse, error)
	WebsiteSearch(ctx context.Context, in *WebsiteSearchRequest, opts ...grpc.CallOption) (*WebsiteSearchResponse, error)
	WebsiteRecommend(ctx context.Context, in *WebsiteRecommendRequest, opts ...grpc.CallOption) (*WebsiteRecommendResponse, error)
	WebsiteImport(ctx context.Context, in *WebsiteImportRequest, opts ...grpc.CallOption) (*WebsiteImportResponse, error)
	UpdateMetaMaskPhishing(ctx context.Context, in *UpdateMetaMaskPhishingRequest, opts ...grpc.CallOption) (*UpdateMetaMaskPhishingResponse, error)
	UpdatePhishingSiteBlackOrigin(ctx context.Context, in *UpdatePhishingSiteBlackOriginRequest, opts ...grpc.CallOption) (*UpdatePhishingSiteBlackOriginResponse, error)
	UpdatePhishingOriginByWebSite(ctx context.Context, in *UpdatePhishingOriginByWebSiteRequest, opts ...grpc.CallOption) (*UpdatePhishingOriginByWebSiteResponse, error)
	UpdatePhishingSiteByWebsite(ctx context.Context, in *UpdatePhishingSiteByWebsiteRequest, opts ...grpc.CallOption) (*UpdatePhishingSiteByWebsiteResponse, error)
	PhishingCheck(ctx context.Context, in *PhishingCheckRequest, opts ...grpc.CallOption) (*PhishingCheckResponse, error)
}

type websitesvcClient struct {
	cc *grpc.ClientConn
}

func NewWebsitesvcClient(cc *grpc.ClientConn) WebsitesvcClient {
	return &websitesvcClient{cc}
}

func (c *websitesvcClient) WebsiteCategoryList(ctx context.Context, in *WebsiteCategoryListRequest, opts ...grpc.CallOption) (*WebsiteCategoryListResponse, error) {
	out := new(WebsiteCategoryListResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/WebsiteCategoryList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websitesvcClient) WebsitePage(ctx context.Context, in *WebsitePageRequest, opts ...grpc.CallOption) (*WebsitePageResponse, error) {
	out := new(WebsitePageResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/WebsitePage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websitesvcClient) WebsiteSearch(ctx context.Context, in *WebsiteSearchRequest, opts ...grpc.CallOption) (*WebsiteSearchResponse, error) {
	out := new(WebsiteSearchResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/WebsiteSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websitesvcClient) WebsiteRecommend(ctx context.Context, in *WebsiteRecommendRequest, opts ...grpc.CallOption) (*WebsiteRecommendResponse, error) {
	out := new(WebsiteRecommendResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/WebsiteRecommend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websitesvcClient) WebsiteImport(ctx context.Context, in *WebsiteImportRequest, opts ...grpc.CallOption) (*WebsiteImportResponse, error) {
	out := new(WebsiteImportResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/WebsiteImport", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websitesvcClient) UpdateMetaMaskPhishing(ctx context.Context, in *UpdateMetaMaskPhishingRequest, opts ...grpc.CallOption) (*UpdateMetaMaskPhishingResponse, error) {
	out := new(UpdateMetaMaskPhishingResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/UpdateMetaMaskPhishing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websitesvcClient) UpdatePhishingSiteBlackOrigin(ctx context.Context, in *UpdatePhishingSiteBlackOriginRequest, opts ...grpc.CallOption) (*UpdatePhishingSiteBlackOriginResponse, error) {
	out := new(UpdatePhishingSiteBlackOriginResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/UpdatePhishingSiteBlackOrigin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websitesvcClient) UpdatePhishingOriginByWebSite(ctx context.Context, in *UpdatePhishingOriginByWebSiteRequest, opts ...grpc.CallOption) (*UpdatePhishingOriginByWebSiteResponse, error) {
	out := new(UpdatePhishingOriginByWebSiteResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/UpdatePhishingOriginByWebSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websitesvcClient) UpdatePhishingSiteByWebsite(ctx context.Context, in *UpdatePhishingSiteByWebsiteRequest, opts ...grpc.CallOption) (*UpdatePhishingSiteByWebsiteResponse, error) {
	out := new(UpdatePhishingSiteByWebsiteResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/UpdatePhishingSiteByWebsite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websitesvcClient) PhishingCheck(ctx context.Context, in *PhishingCheckRequest, opts ...grpc.CallOption) (*PhishingCheckResponse, error) {
	out := new(PhishingCheckResponse)
	err := c.cc.Invoke(ctx, "/websitesvc.Websitesvc/PhishingCheck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsitesvcServer is the server API for Websitesvc service.
type WebsitesvcServer interface {
	WebsiteCategoryList(context.Context, *WebsiteCategoryListRequest) (*WebsiteCategoryListResponse, error)
	WebsitePage(context.Context, *WebsitePageRequest) (*WebsitePageResponse, error)
	WebsiteSearch(context.Context, *WebsiteSearchRequest) (*WebsiteSearchResponse, error)
	WebsiteRecommend(context.Context, *WebsiteRecommendRequest) (*WebsiteRecommendResponse, error)
	WebsiteImport(context.Context, *WebsiteImportRequest) (*WebsiteImportResponse, error)
	UpdateMetaMaskPhishing(context.Context, *UpdateMetaMaskPhishingRequest) (*UpdateMetaMaskPhishingResponse, error)
	UpdatePhishingSiteBlackOrigin(context.Context, *UpdatePhishingSiteBlackOriginRequest) (*UpdatePhishingSiteBlackOriginResponse, error)
	UpdatePhishingOriginByWebSite(context.Context, *UpdatePhishingOriginByWebSiteRequest) (*UpdatePhishingOriginByWebSiteResponse, error)
	UpdatePhishingSiteByWebsite(context.Context, *UpdatePhishingSiteByWebsiteRequest) (*UpdatePhishingSiteByWebsiteResponse, error)
	PhishingCheck(context.Context, *PhishingCheckRequest) (*PhishingCheckResponse, error)
}

// UnimplementedWebsitesvcServer can be embedded to have forward compatible implementations.
type UnimplementedWebsitesvcServer struct {
}

func (*UnimplementedWebsitesvcServer) WebsiteCategoryList(ctx context.Context, req *WebsiteCategoryListRequest) (*WebsiteCategoryListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteCategoryList not implemented")
}
func (*UnimplementedWebsitesvcServer) WebsitePage(ctx context.Context, req *WebsitePageRequest) (*WebsitePageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsitePage not implemented")
}
func (*UnimplementedWebsitesvcServer) WebsiteSearch(ctx context.Context, req *WebsiteSearchRequest) (*WebsiteSearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteSearch not implemented")
}
func (*UnimplementedWebsitesvcServer) WebsiteRecommend(ctx context.Context, req *WebsiteRecommendRequest) (*WebsiteRecommendResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteRecommend not implemented")
}
func (*UnimplementedWebsitesvcServer) WebsiteImport(ctx context.Context, req *WebsiteImportRequest) (*WebsiteImportResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebsiteImport not implemented")
}
func (*UnimplementedWebsitesvcServer) UpdateMetaMaskPhishing(ctx context.Context, req *UpdateMetaMaskPhishingRequest) (*UpdateMetaMaskPhishingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMetaMaskPhishing not implemented")
}
func (*UnimplementedWebsitesvcServer) UpdatePhishingSiteBlackOrigin(ctx context.Context, req *UpdatePhishingSiteBlackOriginRequest) (*UpdatePhishingSiteBlackOriginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhishingSiteBlackOrigin not implemented")
}
func (*UnimplementedWebsitesvcServer) UpdatePhishingOriginByWebSite(ctx context.Context, req *UpdatePhishingOriginByWebSiteRequest) (*UpdatePhishingOriginByWebSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhishingOriginByWebSite not implemented")
}
func (*UnimplementedWebsitesvcServer) UpdatePhishingSiteByWebsite(ctx context.Context, req *UpdatePhishingSiteByWebsiteRequest) (*UpdatePhishingSiteByWebsiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePhishingSiteByWebsite not implemented")
}
func (*UnimplementedWebsitesvcServer) PhishingCheck(ctx context.Context, req *PhishingCheckRequest) (*PhishingCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PhishingCheck not implemented")
}

func RegisterWebsitesvcServer(s *grpc.Server, srv WebsitesvcServer) {
	s.RegisterService(&_Websitesvc_serviceDesc, srv)
}

func _Websitesvc_WebsiteCategoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsiteCategoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).WebsiteCategoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/WebsiteCategoryList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).WebsiteCategoryList(ctx, req.(*WebsiteCategoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websitesvc_WebsitePage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsitePageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).WebsitePage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/WebsitePage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).WebsitePage(ctx, req.(*WebsitePageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websitesvc_WebsiteSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsiteSearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).WebsiteSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/WebsiteSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).WebsiteSearch(ctx, req.(*WebsiteSearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websitesvc_WebsiteRecommend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsiteRecommendRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).WebsiteRecommend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/WebsiteRecommend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).WebsiteRecommend(ctx, req.(*WebsiteRecommendRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websitesvc_WebsiteImport_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebsiteImportRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).WebsiteImport(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/WebsiteImport",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).WebsiteImport(ctx, req.(*WebsiteImportRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websitesvc_UpdateMetaMaskPhishing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMetaMaskPhishingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).UpdateMetaMaskPhishing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/UpdateMetaMaskPhishing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).UpdateMetaMaskPhishing(ctx, req.(*UpdateMetaMaskPhishingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websitesvc_UpdatePhishingSiteBlackOrigin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhishingSiteBlackOriginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).UpdatePhishingSiteBlackOrigin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/UpdatePhishingSiteBlackOrigin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).UpdatePhishingSiteBlackOrigin(ctx, req.(*UpdatePhishingSiteBlackOriginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websitesvc_UpdatePhishingOriginByWebSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhishingOriginByWebSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).UpdatePhishingOriginByWebSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/UpdatePhishingOriginByWebSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).UpdatePhishingOriginByWebSite(ctx, req.(*UpdatePhishingOriginByWebSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websitesvc_UpdatePhishingSiteByWebsite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePhishingSiteByWebsiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).UpdatePhishingSiteByWebsite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/UpdatePhishingSiteByWebsite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).UpdatePhishingSiteByWebsite(ctx, req.(*UpdatePhishingSiteByWebsiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websitesvc_PhishingCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PhishingCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsitesvcServer).PhishingCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/websitesvc.Websitesvc/PhishingCheck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsitesvcServer).PhishingCheck(ctx, req.(*PhishingCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Websitesvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "websitesvc.Websitesvc",
	HandlerType: (*WebsitesvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebsiteCategoryList",
			Handler:    _Websitesvc_WebsiteCategoryList_Handler,
		},
		{
			MethodName: "WebsitePage",
			Handler:    _Websitesvc_WebsitePage_Handler,
		},
		{
			MethodName: "WebsiteSearch",
			Handler:    _Websitesvc_WebsiteSearch_Handler,
		},
		{
			MethodName: "WebsiteRecommend",
			Handler:    _Websitesvc_WebsiteRecommend_Handler,
		},
		{
			MethodName: "WebsiteImport",
			Handler:    _Websitesvc_WebsiteImport_Handler,
		},
		{
			MethodName: "UpdateMetaMaskPhishing",
			Handler:    _Websitesvc_UpdateMetaMaskPhishing_Handler,
		},
		{
			MethodName: "UpdatePhishingSiteBlackOrigin",
			Handler:    _Websitesvc_UpdatePhishingSiteBlackOrigin_Handler,
		},
		{
			MethodName: "UpdatePhishingOriginByWebSite",
			Handler:    _Websitesvc_UpdatePhishingOriginByWebSite_Handler,
		},
		{
			MethodName: "UpdatePhishingSiteByWebsite",
			Handler:    _Websitesvc_UpdatePhishingSiteByWebsite_Handler,
		},
		{
			MethodName: "PhishingCheck",
			Handler:    _Websitesvc_PhishingCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "websitesvc.proto",
}

func (m *PageQuick) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PageQuick) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Limit))
	}
	if len(m.NextId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.NextId)))
		i += copy(dAtA[i:], m.NextId)
	}
	if m.Total != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Total))
	}
	return i, nil
}

func (m *Page) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Page) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TotalRecords != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.TotalRecords))
	}
	if m.PageSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.PageSize))
	}
	if m.PageNum != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.PageNum))
	}
	if m.TotalPage != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.TotalPage))
	}
	return i, nil
}

func (m *WebsiteCategoryListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteCategoryListRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.ListNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.ListNum))
	}
	return i, nil
}

func (m *WebsiteCategory) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteCategory) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.TypeString) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.TypeString)))
		i += copy(dAtA[i:], m.TypeString)
	}
	if len(m.ShorterName) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.ShorterName)))
		i += copy(dAtA[i:], m.ShorterName)
	}
	if len(m.ParentId) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.ParentId)))
		i += copy(dAtA[i:], m.ParentId)
	}
	if len(m.ChildrenCategory) > 0 {
		for _, msg := range m.ChildrenCategory {
			dAtA[i] = 0x3a
			i++
			i = encodeVarintWebsitesvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WebsiteCategoryListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteCategoryListResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWebsitesvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WebsitePageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsitePageRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.WebsiteCategoryId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.WebsiteCategoryId)))
		i += copy(dAtA[i:], m.WebsiteCategoryId)
	}
	if len(m.Keywords) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Keywords)))
		i += copy(dAtA[i:], m.Keywords)
	}
	if m.Paginator != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Paginator.Size()))
		n1, err1 := m.Paginator.MarshalTo(dAtA[i:])
		if err1 != nil {
			return 0, err1
		}
		i += n1
	}
	if len(m.SubcategoryId) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.SubcategoryId)))
		i += copy(dAtA[i:], m.SubcategoryId)
	}
	return i, nil
}

func (m *WebsitePageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsitePageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWebsitesvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Paginator != nil {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Paginator.Size()))
		n2, err2 := m.Paginator.MarshalTo(dAtA[i:])
		if err2 != nil {
			return 0, err2
		}
		i += n2
	}
	return i, nil
}

func (m *WebsiteSearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteSearchRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if len(m.Keywords) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Keywords)))
		i += copy(dAtA[i:], m.Keywords)
	}
	return i, nil
}

func (m *WebsiteSearchResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteSearchResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWebsitesvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Website) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Website) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if len(m.WebsiteCategoryId) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.WebsiteCategoryId)))
		i += copy(dAtA[i:], m.WebsiteCategoryId)
	}
	if len(m.Title) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Title)))
		i += copy(dAtA[i:], m.Title)
	}
	if len(m.Url) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Url)))
		i += copy(dAtA[i:], m.Url)
	}
	if len(m.Logo) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Logo)))
		i += copy(dAtA[i:], m.Logo)
	}
	if len(m.Desc) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Desc)))
		i += copy(dAtA[i:], m.Desc)
	}
	if len(m.Type) > 0 {
		dAtA[i] = 0x3a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.WebsiteCategory != nil {
		dAtA[i] = 0x42
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.WebsiteCategory.Size()))
		n3, err3 := m.WebsiteCategory.MarshalTo(dAtA[i:])
		if err3 != nil {
			return 0, err3
		}
		i += n3
	}
	if m.Subcategory != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Subcategory.Size()))
		n4, err4 := m.Subcategory.MarshalTo(dAtA[i:])
		if err4 != nil {
			return 0, err4
		}
		i += n4
	}
	if len(m.SubcategoryId) > 0 {
		dAtA[i] = 0x52
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.SubcategoryId)))
		i += copy(dAtA[i:], m.SubcategoryId)
	}
	return i, nil
}

func (m *WebsiteRecommendRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteRecommendRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Type) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Type)))
		i += copy(dAtA[i:], m.Type)
	}
	if m.ListNum != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.ListNum))
	}
	return i, nil
}

func (m *WebsiteRecommendResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteRecommendResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for _, msg := range m.Data {
			dAtA[i] = 0x12
			i++
			i = encodeVarintWebsitesvc(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *WebsiteImportRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteImportRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.FilePath) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.FilePath)))
		i += copy(dAtA[i:], m.FilePath)
	}
	return i, nil
}

func (m *WebsiteImportResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *WebsiteImportResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *UpdateMetaMaskPhishingRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMetaMaskPhishingRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdateMetaMaskPhishingResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateMetaMaskPhishingResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *UpdatePhishingOriginByWebSiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhishingOriginByWebSiteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdatePhishingOriginByWebSiteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhishingOriginByWebSiteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *UpdatePhishingSiteBlackOriginRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhishingSiteBlackOriginRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdatePhishingSiteBlackOriginResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhishingSiteBlackOriginResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *UpdatePhishingSiteByWebsiteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhishingSiteByWebsiteRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *UpdatePhishingSiteByWebsiteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdatePhishingSiteByWebsiteResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	return i, nil
}

func (m *PhishingCheckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhishingCheckRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.DomainName) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.DomainName)))
		i += copy(dAtA[i:], m.DomainName)
	}
	return i, nil
}

func (m *PhishingCheckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PhishingCheckResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Code))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(m.Type))
	}
	if len(m.TypeString) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.TypeString)))
		i += copy(dAtA[i:], m.TypeString)
	}
	if len(m.DomainName) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.DomainName)))
		i += copy(dAtA[i:], m.DomainName)
	}
	if len(m.Origin) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintWebsitesvc(dAtA, i, uint64(len(m.Origin)))
		i += copy(dAtA[i:], m.Origin)
	}
	return i, nil
}

func encodeVarintWebsitesvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PageQuick) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Limit != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Limit))
	}
	l = len(m.NextId)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	if m.Total != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Total))
	}
	return n
}

func (m *Page) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalRecords != 0 {
		n += 1 + sovWebsitesvc(uint64(m.TotalRecords))
	}
	if m.PageSize != 0 {
		n += 1 + sovWebsitesvc(uint64(m.PageSize))
	}
	if m.PageNum != 0 {
		n += 1 + sovWebsitesvc(uint64(m.PageNum))
	}
	if m.TotalPage != 0 {
		n += 1 + sovWebsitesvc(uint64(m.TotalPage))
	}
	return n
}

func (m *WebsiteCategoryListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	if m.ListNum != 0 {
		n += 1 + sovWebsitesvc(uint64(m.ListNum))
	}
	return n
}

func (m *WebsiteCategory) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.TypeString)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.ShorterName)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	if len(m.ChildrenCategory) > 0 {
		for _, e := range m.ChildrenCategory {
			l = e.Size()
			n += 1 + l + sovWebsitesvc(uint64(l))
		}
	}
	return n
}

func (m *WebsiteCategoryListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovWebsitesvc(uint64(l))
		}
	}
	return n
}

func (m *WebsitePageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.WebsiteCategoryId)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Keywords)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.SubcategoryId)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	return n
}

func (m *WebsitePageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovWebsitesvc(uint64(l))
		}
	}
	if m.Paginator != nil {
		l = m.Paginator.Size()
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	return n
}

func (m *WebsiteSearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Keywords)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	return n
}

func (m *WebsiteSearchResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovWebsitesvc(uint64(l))
		}
	}
	return n
}

func (m *Website) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.WebsiteCategoryId)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Desc)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	if m.WebsiteCategory != nil {
		l = m.WebsiteCategory.Size()
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	if m.Subcategory != nil {
		l = m.Subcategory.Size()
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.SubcategoryId)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	return n
}

func (m *WebsiteRecommendRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	if m.ListNum != 0 {
		n += 1 + sovWebsitesvc(uint64(m.ListNum))
	}
	return n
}

func (m *WebsiteRecommendResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	if len(m.Data) > 0 {
		for _, e := range m.Data {
			l = e.Size()
			n += 1 + l + sovWebsitesvc(uint64(l))
		}
	}
	return n
}

func (m *WebsiteImportRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FilePath)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	return n
}

func (m *WebsiteImportResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	return n
}

func (m *UpdateMetaMaskPhishingRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdateMetaMaskPhishingResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	return n
}

func (m *UpdatePhishingOriginByWebSiteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdatePhishingOriginByWebSiteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	return n
}

func (m *UpdatePhishingSiteBlackOriginRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdatePhishingSiteBlackOriginResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	return n
}

func (m *UpdatePhishingSiteByWebsiteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *UpdatePhishingSiteByWebsiteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	return n
}

func (m *PhishingCheckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	return n
}

func (m *PhishingCheckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Code))
	}
	if m.Type != 0 {
		n += 1 + sovWebsitesvc(uint64(m.Type))
	}
	l = len(m.TypeString)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.DomainName)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	l = len(m.Origin)
	if l > 0 {
		n += 1 + l + sovWebsitesvc(uint64(l))
	}
	return n
}

func sovWebsitesvc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWebsitesvc(x uint64) (n int) {
	return sovWebsitesvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PageQuick) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PageQuick: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PageQuick: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NextId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			m.Total = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Total |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Page) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Page: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Page: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRecords", wireType)
			}
			m.TotalRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageSize", wireType)
			}
			m.PageSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageSize |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNum", wireType)
			}
			m.PageNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalPage", wireType)
			}
			m.TotalPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalPage |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteCategoryListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteCategoryListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteCategoryListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListNum", wireType)
			}
			m.ListNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteCategory) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteCategory: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteCategory: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShorterName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShorterName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildrenCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChildrenCategory = append(m.ChildrenCategory, &WebsiteCategory{})
			if err := m.ChildrenCategory[len(m.ChildrenCategory)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteCategoryListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteCategoryListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteCategoryListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &WebsiteCategory{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsitePageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsitePageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsitePageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteCategoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteCategoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &Page{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubcategoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubcategoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsitePageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsitePageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsitePageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Website{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paginator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Paginator == nil {
				m.Paginator = &Page{}
			}
			if err := m.Paginator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteSearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteSearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteSearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteSearchResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteSearchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteSearchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Website{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Website) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Website: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Website: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteCategoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WebsiteCategoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Desc", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Desc = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WebsiteCategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.WebsiteCategory == nil {
				m.WebsiteCategory = &WebsiteCategory{}
			}
			if err := m.WebsiteCategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subcategory", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Subcategory == nil {
				m.Subcategory = &WebsiteCategory{}
			}
			if err := m.Subcategory.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SubcategoryId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SubcategoryId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteRecommendRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteRecommendRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteRecommendRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ListNum", wireType)
			}
			m.ListNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ListNum |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteRecommendResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteRecommendResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteRecommendResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data, &Website{})
			if err := m.Data[len(m.Data)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteImportRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteImportRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteImportRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FilePath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FilePath = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *WebsiteImportResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: WebsiteImportResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: WebsiteImportResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMetaMaskPhishingRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMetaMaskPhishingRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMetaMaskPhishingRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateMetaMaskPhishingResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateMetaMaskPhishingResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateMetaMaskPhishingResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhishingOriginByWebSiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhishingOriginByWebSiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhishingOriginByWebSiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhishingOriginByWebSiteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhishingOriginByWebSiteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhishingOriginByWebSiteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhishingSiteBlackOriginRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhishingSiteBlackOriginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhishingSiteBlackOriginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhishingSiteBlackOriginResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhishingSiteBlackOriginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhishingSiteBlackOriginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhishingSiteByWebsiteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhishingSiteByWebsiteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhishingSiteByWebsiteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdatePhishingSiteByWebsiteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdatePhishingSiteByWebsiteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdatePhishingSiteByWebsiteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhishingCheckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhishingCheckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhishingCheckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PhishingCheckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhishingCheckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhishingCheckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TypeString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TypeString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DomainName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DomainName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Origin", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Origin = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipWebsitesvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWebsitesvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWebsitesvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWebsitesvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWebsitesvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWebsitesvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWebsitesvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWebsitesvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWebsitesvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWebsitesvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWebsitesvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWebsitesvc   = fmt.Errorf("proto: integer overflow")
)
