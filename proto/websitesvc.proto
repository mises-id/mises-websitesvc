// In general, while you can use proto2 (the current default protocol buffers
// version), we recommend that you use proto3 with gRPC as it lets you use the
// full range of gRPC-supported languages, as well as avoiding compatibility
// issues with proto2 clients talking to proto3 servers and vice versa.
syntax = "proto3";

// The package name determines the name of the directories that truss creates
// for `package echo;` truss will create the directory "echo-service".
package websitesvc;

import "github.com/metaverse/truss/deftree/googlethirdparty/annotations.proto";

service Websitesvc {

  rpc WebsiteCategoryList (WebsiteCategoryListRequest) returns (WebsiteCategoryListResponse) {
        option (google.api.http) = {
          get: "/website_category/list"
          additional_bindings {
            get: "/website_category/list/"
          }
        };

}
  rpc WebsitePage (WebsitePageRequest) returns (WebsitePageResponse) {
        option (google.api.http) = {
          get: "/website/page"
          additional_bindings {
            get: "/website/page/"
          }
        };
}
  rpc WebsiteSearch (WebsiteSearchRequest) returns (WebsiteSearchResponse) {
        option (google.api.http) = {
          get: "/website/search"
          additional_bindings {
            get: "/website/search/"
          }
        };
}
  rpc WebsiteRecommend (WebsiteRecommendRequest) returns (WebsiteRecommendResponse) {
        option (google.api.http) = {
          get: "/website/recommend"
          additional_bindings {
            get: "/website/recommend/"
          }
        };
}
  rpc WebsiteImport (WebsiteImportRequest) returns (WebsiteImportResponse) {
        option (google.api.http) = {
          get: "/website/import"
          additional_bindings {
            get: "/website/import/"
          }
        };
}
  rpc UpdateMetaMaskPhishing (UpdateMetaMaskPhishingRequest) returns (UpdateMetaMaskPhishingResponse) {
        option (google.api.http) = {
          get: "/phishing_site/update_metamask"
          additional_bindings {
            get: "/phishing_site/update_metamask/"
          }
        };
}
  rpc UpdatePhishingSiteBlackOrigin (UpdatePhishingSiteBlackOriginRequest) returns (UpdatePhishingSiteBlackOriginResponse) {
        option (google.api.http) = {
          get: "/phishing_site/update_black_origin"
          additional_bindings {
            get: "/phishing_site/update_black_origin/"
          }
        };
}
  rpc UpdatePhishingOriginByWebSite (UpdatePhishingOriginByWebSiteRequest) returns (UpdatePhishingOriginByWebSiteResponse) {
        option (google.api.http) = {
          get: "/phishing_origin/update_by_website"
          additional_bindings {
            get: "/phishing_origin/update_by_website/"
          }
        };
}
  rpc UpdatePhishingSiteByWebsite (UpdatePhishingSiteByWebsiteRequest) returns (UpdatePhishingSiteByWebsiteResponse) {
        option (google.api.http) = {
          get: "/phishing_site/update_by_website"
          additional_bindings {
            get: "/phishing_site/update_by_website/"
          }
        };
}
  rpc PhishingCheck (PhishingCheckRequest) returns (PhishingCheckResponse) {
        option (google.api.http) = {
          get: "/phishing_site/check"
          additional_bindings {
            get: "/phishing_site/check/"
          }
        };
}

}

message PageQuick {
  uint64 limit = 1;
  string next_id = 2;
  uint64 total = 3;
}
message Page {
  uint64 total_records = 1;
  uint64 page_size = 2;
  uint64 page_num = 3;
  uint64 total_page = 4;
}

message WebsiteCategoryListRequest {
  string type = 1;
  uint64 list_num = 2;
}

message WebsiteCategory {
  string id = 1;
  string name = 2;
  string desc = 3;
  string type_string = 4;
  string shorter_name = 5;
  string parent_id = 6;
  repeated WebsiteCategory children_category = 7;
}

message WebsiteCategoryListResponse {
  uint64 code = 1;
  repeated WebsiteCategory data = 2;
}

message WebsitePageRequest {
  string type = 1;
  string website_category_id = 2;
  string Keywords = 3;
  Page paginator = 4;
  string subcategory_id = 5;
}

message WebsitePageResponse {
  uint64 code = 1;
  repeated Website data = 2;
  Page paginator = 3;
}
message WebsiteSearchRequest {
  string type = 1;
  string keywords = 2;
}

message WebsiteSearchResponse {
  uint64 code = 1;
  repeated Website data = 2;
}

message Website {
  string id = 1;
  string website_category_id = 2;
  string title = 3;
  string url = 4;
  string logo = 5;
  string desc = 6;
  string type = 7;
  WebsiteCategory website_category = 8;
  WebsiteCategory subcategory = 9;
  string subcategory_id = 10;
}

message WebsiteRecommendRequest {
  string type = 1;
  uint64 list_num = 2;
}

message WebsiteRecommendResponse {
  uint64 code = 1;
  repeated Website data = 2;
}
message WebsiteImportRequest {
  string file_path = 1;
}

message WebsiteImportResponse {
  uint64 code = 1;
}
message UpdateMetaMaskPhishingRequest {
 
}
message UpdateMetaMaskPhishingResponse {
  uint64 code = 1;
}
message UpdatePhishingOriginByWebSiteRequest {
 
}
message UpdatePhishingOriginByWebSiteResponse {
  uint64 code = 1;
}
message UpdatePhishingSiteBlackOriginRequest {
 
}
message UpdatePhishingSiteBlackOriginResponse {
  uint64 code = 1;
}
message UpdatePhishingSiteByWebsiteRequest {
 
}
message UpdatePhishingSiteByWebsiteResponse {
  uint64 code = 1;
}
message PhishingCheckRequest {
 string domain_name = 1;
}
message PhishingCheckResponse {
  uint64 code = 1;
  uint64 type = 2;
  string type_string = 3;
  string domain_name = 4;
  string origin = 5;
}
